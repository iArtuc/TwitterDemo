import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"
    defaultConfig {
        applicationId "com.tretton.app"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            debuggable true
            minifyEnabled false
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile 'proguard-rules.pro'
        }
        release {
            versionNameSuffix ''
            minifyEnabled false
            debuggable false
//            signingConfig signingConfigs.release
            zipAlignEnabled true
        }
    }
}

def supportLibVersion = '25.0.0'
def daggerVersion = '2.5'
def retrofitVersion = '2.1.0'
def rxJavaVersion = '1.1.5'
def rxAndroidVersion = '1.2.0'

configurations.all {
    resolutionStrategy.force 'org.hamcrest:hamcrest-core:1.3'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    //support
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"
    compile "com.android.support:recyclerview-v7:$supportLibVersion"

    //Beautify
    compile 'com.jakewharton:butterknife:8.1.0'
    apt 'com.jakewharton:butterknife-compiler:8.1.0'
    compile 'com.jakewharton.timber:timber:4.1.2'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.squareup.picasso:picasso:2.5.2'

    // RxJava
    compile "io.reactivex:rxandroid:$rxAndroidVersion"
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile "io.reactivex:rxjava:$rxJavaVersion"

    // Retrofit RxJava
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"

    //DI
    compile "com.google.dagger:dagger:$daggerVersion"
    apt "com.google.dagger:dagger-compiler:$daggerVersion"
    provided 'org.glassfish:javax.annotation:10.0-b28'

    //Network
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    compile "com.squareup.okhttp3:logging-interceptor:3.2.0"
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile('com.twitter.sdk.android:twitter:2.3.1@aar') {
        transitive = true;
    }

}




def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()) {
    props.load(new InputStreamReader(new FileInputStream(propFile), "UTF-8"))

    if (props != null &&
            props.containsKey('RELEASE_STORE_FILE') &&
            props.containsKey('RELEASE_STORE_PASSWORD') &&
            props.containsKey('RELEASE_KEY_ALIAS') &&
            props.containsKey('RELEASE_KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['RELEASE_STORE_FILE'])
        android.signingConfigs.release.storePassword = props['RELEASE_STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['RELEASE_KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['RELEASE_KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

def getVersionCodeValue() {
    return versionMajor * 100 + versionMinor * 10 + versionPatch
}

def getVersionNameValue() {
    def buildValue = ''
    def runTasks = gradle.startParameter.taskNames
    if ('crashlyticsUploadDistributionReleaseCandidate' in runTasks ||
            'crashlyticsUploadDistributionDebug' in
            runTasks) {
        def df = new SimpleDateFormat("yyyyMMdd:HHmm");
        buildValue = df.format(new Date())
    }
    def versionNameValue = "${versionMajor}.${versionMinor}.${versionPatch}"
    if (!buildValue.equals('')) {
        versionNameValue += "-${buildValue}"
    }
    return versionNameValue
}
